[{"data":1,"prerenderedAt":1863},["ShallowReactive",2],{"content:tidaw":3},{"id":4,"title":5,"body":6,"cover":1848,"date":1849,"description":1850,"extension":1851,"meta":1852,"navigation":595,"path":1853,"seo":1854,"stem":1855,"tags":1856,"__hash__":1862},"content/tidaw.md","ブラウザで奏でる夢のDAW",{"type":7,"value":8,"toc":1826},"minimark",[9,14,21,29,32,37,50,53,56,60,67,119,124,128,131,150,153,157,160,164,167,178,185,189,207,210,216,220,223,249,252,256,275,320,325,328,400,403,406,423,429,434,436,449,451,455,458,463,495,500,537,547,551,680,684,1134,1138,1144,1148,1242,1246,1332,1335,1339,1357,1363,1418,1423,1558,1561,1595,1598,1618,1679,1683,1798,1800,1803,1817,1819,1822],[10,11,13],"h1",{"id":12},"ブラウザで奏でる夢のdaw","ブラウザで奏でる夢のDAW！",[15,16,17],"blockquote",{},[18,19,20],"p",{},"React + Rust (WASM) で挑むリアルタイムオーディオ処理の冒険記。壮大な夢と失敗、そして学びの航海ログです。",[18,22,23,24,28],{},"皆さん、こんにちは！フロントエンド開発の広大な海を航海している一人のエンジニアです。突然ですが、皆さんは夢を持っていますか？僕の夢は ",[25,26,27],"strong",{},"「ブラウザ上で本格的な DAW（Digital Audio Workstation）を作ること」","。Web ブラウザという誰もが持つキャンバスの上で、自由に音楽を創造できるアプリケーションを作りたいんです。",[18,30,31],{},"「え、ブラウザで DAW？無謀じゃない？」──そう思ったあなた、一理あります。でも現代の Web 技術なら不可能じゃないはず！この長い記事は、その無謀とも言える夢に向かって突き進む、長く、時に困難で、それでも最高にエキサイティングな開発の旅の記録です。",[33,34,36],"h2",{"id":35},"今回の旅の武器","🧰 今回の旅の武器",[38,39,40,44,47],"ul",{},[41,42,43],"li",{},"フロントエンド: React + TypeScript",[41,45,46],{},"オーディオ処理の心臓部: Rust → WebAssembly (WASM)",[41,48,49],{},"並列化: Web Worker + AudioWorklet + SharedArrayBuffer",[18,51,52],{},"読み終える頃には、「ブラウザで音が鳴る」その裏側の仕組みにどっぷり浸っているはず。そして、あなた自身の「ブラウザで何か作ってみたい！」という気持ちに火が付いていたなら最高です。🚀",[54,55],"hr",{},[33,57,59],{"id":58},"第一章-設計という名の航海図-最初の嵐と進路変更","第一章: 設計という名の航海図 – 最初の嵐と進路変更",[18,61,62,63,66],{},"最初に立ちはだかったのは「どこまで WASM に任せるか？」問題。初期案では UI はただの入出力、ロジックも状態も全部 Rust 側に置こうとしました。しかし ",[25,64,65],{},"「UI と密結合な状態を WASM に置くのは非効率 & 複雑」"," という現実にぶつかり破綻。そこで責務を再分配：",[68,69,70,83],"table",{},[71,72,73],"thead",{},[74,75,76,80],"tr",{},[77,78,79],"th",{},"レイヤー",[77,81,82],{},"役割",[84,85,86,95,103,111],"tbody",{},[74,87,88,92],{},[89,90,91],"td",{},"React (UI)",[89,93,94],{},"描画・入力・アプリ全体の状態管理",[74,96,97,100],{},[89,98,99],{},"Rust WASM",[89,101,102],{},"純粋な DSP（信号生成/処理）",[74,104,105,108],{},[89,106,107],{},"Worker",[89,109,110],{},"WASM の実行環境・非同期橋渡し",[74,112,113,116],{},[89,114,115],{},"AudioWorklet",[89,117,118],{},"超低遅延での最終出力",[15,120,121],{},[18,122,123],{},"教訓: 「UI に近い状態は UI 側で持つ」。無理に WASM へ押し込まない。",[33,125,127],{"id":126},"第二章-三銃士-audioworklet-sharedarraybuffer-rust-wasm","第二章: 三銃士 – AudioWorklet / SharedArrayBuffer / Rust WASM",[18,129,130],{},"リアルタイム処理を成立させる鍵はこの 3 つの連携：",[132,133,134,139,145],"ol",{},[41,135,136,138],{},[25,137,115],{}," – メインスレッドに干渉しない低レイテンシ処理",[41,140,141,144],{},[25,142,143],{},"SharedArrayBuffer"," – コピーゼロの共有メモリ伝達",[41,146,147,149],{},[25,148,99],{}," – 高速なサンプル生成",[18,151,152],{},"特に SharedArrayBuffer は「巨大なホワイトボード」。WASM が書き、Worklet が読む──このモデルがパフォーマンスの基盤になります。",[33,154,156],{"id":155},"第三章-まずは小さな一歩-サイン波デモ","第三章: まずは小さな一歩 – サイン波デモ",[18,158,159],{},"最終的な DAW ではなく、最小構成（Play/Pause + 周波数スライダー + サイン波出力）から着手。はじめは TypeScript 実装で流れを作り、あとから Rust に差し替える戦略を採用。これにより初期の学習コストとデバッグコストを最小化。",[33,161,163],{"id":162},"第四章-オーディオエンジンの心臓を起動","第四章: オーディオエンジンの心臓を起動",[18,165,166],{},"セットアップ時の流れ（簡略版）：",[168,169,175],"pre",{"className":170,"code":172,"language":173,"meta":174},[171],"language-text","UI -> Worker: SharedArrayBuffer 渡す\nWorker -> WASM: 初期化\nWorker -> Worklet: Audio 用 SAB 共有\nWorklet: process() で読み出し\n","text","",[176,177,172],"code",{"__ignoreMap":174},[18,179,180,181,184],{},"この段階では ",[25,182,183],{},"“周波数などのパラメータをどう共有するか”"," が未解決で “???” コメントが残る状態。",[33,186,188],{"id":187},"第五章-ui-とエンジンを繋ぐ共有状態モデル","第五章: UI とエンジンを繋ぐ共有状態モデル",[18,190,191,194,195,198,199,202,203,206],{},[176,192,193],{},"postMessage"," 乱発は避けたい。そこで ",[176,196,197],{},"shared-memory-datastructures"," の ",[176,200,201],{},"ShareableMap"," を導入。これにより ",[25,204,205],{},"Map ライクなインターフェースで共有メモリ上のパラメータを参照 / 更新"," 可能に。",[18,208,209],{},"更新の仕組み：",[168,211,214],{"className":212,"code":213,"language":173,"meta":174},[171],"UI (Slider変更) → sharedState.set('frequency', value)\nWorker loop → sharedState.get('frequency') を参照して波形生成\n",[176,215,213],{"__ignoreMap":174},[33,217,219],{"id":218},"第六章-遅延とノイズとの戦い-リングバッファの必然","第六章: 遅延とノイズとの戦い – リングバッファの必然",[18,221,222],{},"Play/Pause の遅延と “プチッ” ノイズ。原因は巨大な 1 秒バッファと生データ書き込み方式。解決へのステップ：",[132,224,225,232,246],{},[41,226,227,228,231],{},"バッファを「円形のコンベヤーベルト」= ",[25,229,230],{},"リングバッファ"," に変更",[41,233,234,237,238,241,242,245],{},[176,235,236],{},"readPointer"," / ",[176,239,240],{},"writePointer"," を ",[176,243,244],{},"Atomics"," で同期",[41,247,248],{},"過剰書き込み・過少読み込みを制御し XRUN を回避",[18,250,251],{},"最終的に即応性が劇的改善。残課題はフェード処理（ポップノイズ軽減）と動的バッファチューニング。",[33,253,255],{"id":254},"第七章-rust-wasm-への差し替え","第七章: Rust WASM への差し替え",[18,257,258,259,262,263,266,267,270,271,274],{},"TypeScript のサイン波ロジックを Rust の ",[176,260,261],{},"SineOscillator"," へ移行。",[176,264,265],{},"wasm-pack"," によるビルド → Worker 内で ",[176,268,269],{},"await init()"," → ",[176,272,273],{},"osc.process()"," という流れ。",[168,276,280],{"className":277,"code":278,"language":279,"meta":174,"style":174},"language-rust shiki shiki-themes github-light github-dark","#[wasm_bindgen]\nimpl SineOscillator {\n    pub fn process(&mut self, length: usize, freq: f32, amp: f32) -> Vec\u003Cf32> {\n        // サンプル生成\n    }\n}\n","rust",[176,281,282,290,296,302,308,314],{"__ignoreMap":174},[283,284,287],"span",{"class":285,"line":286},"line",1,[283,288,289],{},"#[wasm_bindgen]\n",[283,291,293],{"class":285,"line":292},2,[283,294,295],{},"impl SineOscillator {\n",[283,297,299],{"class":285,"line":298},3,[283,300,301],{},"    pub fn process(&mut self, length: usize, freq: f32, amp: f32) -> Vec\u003Cf32> {\n",[283,303,305],{"class":285,"line":304},4,[283,306,307],{},"        // サンプル生成\n",[283,309,311],{"class":285,"line":310},5,[283,312,313],{},"    }\n",[283,315,317],{"class":285,"line":316},6,[283,318,319],{},"}\n",[15,321,322],{},[18,323,324],{},"Rust 化の利点: 多波形拡張・エフェクトチェーン・SIMD 最適化への布石。",[33,326,327],{"id":327},"学びと今後の展望",[68,329,330,343],{},[71,331,332],{},[74,333,334,337,340],{},[77,335,336],{},"課題",[77,338,339],{},"解決/現状",[77,341,342],{},"次の一手",[84,344,345,356,367,378,389],{},[74,346,347,350,353],{},[89,348,349],{},"状態責務の錯綜",[89,351,352],{},"UI と DSP の分離",[89,354,355],{},"グローバル状態管理導入 (Pinia 等)",[74,357,358,361,364],{},[89,359,360],{},"遅延",[89,362,363],{},"リングバッファ化",[89,365,366],{},"ダブルバッファ + latency hint",[74,368,369,372,375],{},[89,370,371],{},"ノイズ",[89,373,374],{},"未対策",[89,376,377],{},"フェード / DC オフセット除去",[74,379,380,383,386],{},[89,381,382],{},"単一オシレーター",[89,384,385],{},"動作確認段階",[89,387,388],{},"モジュール式ノードグラフ",[74,390,391,394,397],{},[89,392,393],{},"手動チューニング",[89,395,396],{},"経験則",[89,398,399],{},"Telemetry + 自動調整",[33,401,402],{"id":402},"まとめ",[18,404,405],{},"このデモは “本格 DAW” の入り口にすぎません。これから：",[38,407,408,411,414,417,420],{},[41,409,410],{},"複数トラック / ノードベースルーティング",[41,412,413],{},"エフェクト（Delay, Filter, Reverb）",[41,415,416],{},"MIDI / WebMIDI 入力",[41,418,419],{},"クリップエディタ + タイムライン",[41,421,422],{},"オフラインレンダリング",[18,424,425,426],{},"ここまで読んでくださり本当にありがとうございました。この記事があなたの創作エネルギーを少しでも刺激できたなら嬉しいです。",[25,427,428],{},"Web はまだまだ未開拓。次はあなたの番です。",[15,430,431],{},[18,432,433],{},"🌊 行こう、ブラウザという名の海へ。",[54,435],{},[437,438,439,443,446],"details",{},[440,441,442],"summary",{},"オリジナル生ログ（クリックで展開）",[18,444,445],{},"（執筆時のラフな生ログ。読みづらさ優先でそのまま保存してあります）",[18,447,448],{},"ブラウザで奏でる夢のDAW！React + Rust(WASM)で作るリアルタイムオーディオ処理の冒険…（以下省略せず原文）",[54,450],{},[33,452,454],{"id":453},"付録-ハンズオン実装チュートリアル","付録: ハンズオン実装チュートリアル",[18,456,457],{},"記事本文は概念～アーキテクチャ寄りでした。ここでは「最小サイン波デモ」を組み立てる実践手順を整理した形でまとめ直します。",[459,460,462],"h3",{"id":461},"_1-プロジェクト初期化","1. プロジェクト初期化",[168,464,468],{"className":465,"code":466,"language":467,"meta":174,"style":174},"language-bash shiki shiki-themes github-light github-dark","cd my-daw-project\nnpm install\n# React + TypeScript テンプレートを Vite で用意（公式ガイド参照）\n","bash",[176,469,470,480,489],{"__ignoreMap":174},[283,471,472,476],{"class":285,"line":286},[283,473,475],{"class":474},"sj4cs","cd",[283,477,479],{"class":478},"sZZnC"," my-daw-project\n",[283,481,482,486],{"class":285,"line":292},[283,483,485],{"class":484},"sScJk","npm",[283,487,488],{"class":478}," install\n",[283,490,491],{"class":285,"line":298},[283,492,494],{"class":493},"sJ8bj","# React + TypeScript テンプレートを Vite で用意（公式ガイド参照）\n",[496,497,499],"h4",{"id":498},"_1-1-tailwind-導入","1-1. Tailwind 導入",[168,501,503],{"className":465,"code":502,"language":467,"meta":174,"style":174},"npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n",[176,504,505,524],{"__ignoreMap":174},[283,506,507,509,512,515,518,521],{"class":285,"line":286},[283,508,485],{"class":484},[283,510,511],{"class":478}," install",[283,513,514],{"class":474}," -D",[283,516,517],{"class":478}," tailwindcss",[283,519,520],{"class":478}," postcss",[283,522,523],{"class":478}," autoprefixer\n",[283,525,526,529,531,534],{"class":285,"line":292},[283,527,528],{"class":484},"npx",[283,530,517],{"class":478},[283,532,533],{"class":478}," init",[283,535,536],{"class":474}," -p\n",[18,538,539,542,543,546],{},[176,540,541],{},"tailwind.config.js"," とエントリー CSS に ",[176,544,545],{},"@tailwind base;"," などを追加。",[496,548,550],{"id":549},"_1-2-vite-の設定sharedarraybuffer-のための-coopcoep","1-2. Vite の設定（SharedArrayBuffer のための COOP/COEP）",[168,552,556],{"className":553,"code":554,"language":555,"meta":174,"style":174},"language-ts shiki shiki-themes github-light github-dark","// vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n    plugins: [react()],\n    server: {\n        headers: {\n            'Cross-Origin-Opener-Policy': 'same-origin',\n            'Cross-Origin-Embedder-Policy': 'require-corp',\n        },\n    },\n})\n","ts",[176,557,558,563,579,591,597,611,622,628,634,649,662,668,674],{"__ignoreMap":174},[283,559,560],{"class":285,"line":286},[283,561,562],{"class":493},"// vite.config.ts\n",[283,564,565,569,573,576],{"class":285,"line":292},[283,566,568],{"class":567},"szBVR","import",[283,570,572],{"class":571},"sVt8B"," { defineConfig } ",[283,574,575],{"class":567},"from",[283,577,578],{"class":478}," 'vite'\n",[283,580,581,583,586,588],{"class":285,"line":298},[283,582,568],{"class":567},[283,584,585],{"class":571}," react ",[283,587,575],{"class":567},[283,589,590],{"class":478}," '@vitejs/plugin-react'\n",[283,592,593],{"class":285,"line":304},[283,594,596],{"emptyLinePlaceholder":595},true,"\n",[283,598,599,602,605,608],{"class":285,"line":310},[283,600,601],{"class":567},"export",[283,603,604],{"class":567}," default",[283,606,607],{"class":484}," defineConfig",[283,609,610],{"class":571},"({\n",[283,612,613,616,619],{"class":285,"line":316},[283,614,615],{"class":571},"    plugins: [",[283,617,618],{"class":484},"react",[283,620,621],{"class":571},"()],\n",[283,623,625],{"class":285,"line":624},7,[283,626,627],{"class":571},"    server: {\n",[283,629,631],{"class":285,"line":630},8,[283,632,633],{"class":571},"        headers: {\n",[283,635,637,640,643,646],{"class":285,"line":636},9,[283,638,639],{"class":478},"            'Cross-Origin-Opener-Policy'",[283,641,642],{"class":571},": ",[283,644,645],{"class":478},"'same-origin'",[283,647,648],{"class":571},",\n",[283,650,652,655,657,660],{"class":285,"line":651},10,[283,653,654],{"class":478},"            'Cross-Origin-Embedder-Policy'",[283,656,642],{"class":571},[283,658,659],{"class":478},"'require-corp'",[283,661,648],{"class":571},[283,663,665],{"class":285,"line":664},11,[283,666,667],{"class":571},"        },\n",[283,669,671],{"class":285,"line":670},12,[283,672,673],{"class":571},"    },\n",[283,675,677],{"class":285,"line":676},13,[283,678,679],{"class":571},"})\n",[459,681,683],{"id":682},"_2-ui-の骨組み","2. UI の骨組み",[168,685,689],{"className":686,"code":687,"language":688,"meta":174,"style":174},"language-tsx shiki shiki-themes github-light github-dark","// src/App.tsx\nimport React, { useState } from 'react'\n\nexport default function App() {\n    const [isPlaying, setIsPlaying] = useState(false)\n    const [frequency, setFrequency] = useState(440)\n    return (\n        \u003Cdiv className=\"flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white gap-4\">\n            \u003Ch1 className=\"text-3xl font-bold mb-4\">WASM Audio Demo\u003C/h1>\n            \u003Cdiv className=\"flex items-center gap-4\">\n                \u003Cbutton\n                    className=\"px-6 py-3 bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors text-xl font-semibold\"\n                    onClick={() => setIsPlaying(!isPlaying)}\n                >\n                    {isPlaying ? 'Pause' : 'Play'}\n                \u003C/button>\n                \u003Cdiv className=\"flex flex-col items-center\">\n                    \u003Cinput\n                        type=\"range\"\n                        min={20}\n                        max={2000}\n                        step={1}\n                        className=\"w-64 accent-blue-600\"\n                        value={frequency}\n                        onChange={(e) => setFrequency(Number(e.target.value))}\n                    />\n                    \u003Cspan className=\"mt-2 text-lg\">{frequency} Hz\u003C/span>\n                \u003C/div>\n            \u003C/div>\n        \u003C/div>\n    )\n}\n","tsx",[176,690,691,696,708,712,727,762,789,797,817,838,853,861,871,895,901,921,932,948,957,968,984,999,1014,1025,1036,1067,1073,1094,1103,1113,1123,1129],{"__ignoreMap":174},[283,692,693],{"class":285,"line":286},[283,694,695],{"class":493},"// src/App.tsx\n",[283,697,698,700,703,705],{"class":285,"line":292},[283,699,568],{"class":567},[283,701,702],{"class":571}," React, { useState } ",[283,704,575],{"class":567},[283,706,707],{"class":478}," 'react'\n",[283,709,710],{"class":285,"line":298},[283,711,596],{"emptyLinePlaceholder":595},[283,713,714,716,718,721,724],{"class":285,"line":304},[283,715,601],{"class":567},[283,717,604],{"class":567},[283,719,720],{"class":567}," function",[283,722,723],{"class":484}," App",[283,725,726],{"class":571},"() {\n",[283,728,729,732,735,738,741,744,747,750,753,756,759],{"class":285,"line":310},[283,730,731],{"class":567},"    const",[283,733,734],{"class":571}," [",[283,736,737],{"class":474},"isPlaying",[283,739,740],{"class":571},", ",[283,742,743],{"class":474},"setIsPlaying",[283,745,746],{"class":571},"] ",[283,748,749],{"class":567},"=",[283,751,752],{"class":484}," useState",[283,754,755],{"class":571},"(",[283,757,758],{"class":474},"false",[283,760,761],{"class":571},")\n",[283,763,764,766,768,771,773,776,778,780,782,784,787],{"class":285,"line":316},[283,765,731],{"class":567},[283,767,734],{"class":571},[283,769,770],{"class":474},"frequency",[283,772,740],{"class":571},[283,774,775],{"class":474},"setFrequency",[283,777,746],{"class":571},[283,779,749],{"class":567},[283,781,752],{"class":484},[283,783,755],{"class":571},[283,785,786],{"class":474},"440",[283,788,761],{"class":571},[283,790,791,794],{"class":285,"line":624},[283,792,793],{"class":567},"    return",[283,795,796],{"class":571}," (\n",[283,798,799,802,806,809,811,814],{"class":285,"line":630},[283,800,801],{"class":571},"        \u003C",[283,803,805],{"class":804},"s9eBZ","div",[283,807,808],{"class":484}," className",[283,810,749],{"class":567},[283,812,813],{"class":478},"\"flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white gap-4\"",[283,815,816],{"class":571},">\n",[283,818,819,822,824,826,828,831,834,836],{"class":285,"line":636},[283,820,821],{"class":571},"            \u003C",[283,823,10],{"class":804},[283,825,808],{"class":484},[283,827,749],{"class":567},[283,829,830],{"class":478},"\"text-3xl font-bold mb-4\"",[283,832,833],{"class":571},">WASM Audio Demo\u003C/",[283,835,10],{"class":804},[283,837,816],{"class":571},[283,839,840,842,844,846,848,851],{"class":285,"line":651},[283,841,821],{"class":571},[283,843,805],{"class":804},[283,845,808],{"class":484},[283,847,749],{"class":567},[283,849,850],{"class":478},"\"flex items-center gap-4\"",[283,852,816],{"class":571},[283,854,855,858],{"class":285,"line":664},[283,856,857],{"class":571},"                \u003C",[283,859,860],{"class":804},"button\n",[283,862,863,866,868],{"class":285,"line":670},[283,864,865],{"class":484},"                    className",[283,867,749],{"class":567},[283,869,870],{"class":478},"\"px-6 py-3 bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors text-xl font-semibold\"\n",[283,872,873,876,878,881,884,887,889,892],{"class":285,"line":676},[283,874,875],{"class":484},"                    onClick",[283,877,749],{"class":567},[283,879,880],{"class":571},"{() ",[283,882,883],{"class":567},"=>",[283,885,886],{"class":484}," setIsPlaying",[283,888,755],{"class":571},[283,890,891],{"class":567},"!",[283,893,894],{"class":571},"isPlaying)}\n",[283,896,898],{"class":285,"line":897},14,[283,899,900],{"class":571},"                >\n",[283,902,904,907,910,913,916,919],{"class":285,"line":903},15,[283,905,906],{"class":571},"                    {isPlaying ",[283,908,909],{"class":567},"?",[283,911,912],{"class":478}," 'Pause'",[283,914,915],{"class":567}," :",[283,917,918],{"class":478}," 'Play'",[283,920,319],{"class":571},[283,922,924,927,930],{"class":285,"line":923},16,[283,925,926],{"class":571},"                \u003C/",[283,928,929],{"class":804},"button",[283,931,816],{"class":571},[283,933,935,937,939,941,943,946],{"class":285,"line":934},17,[283,936,857],{"class":571},[283,938,805],{"class":804},[283,940,808],{"class":484},[283,942,749],{"class":567},[283,944,945],{"class":478},"\"flex flex-col items-center\"",[283,947,816],{"class":571},[283,949,951,954],{"class":285,"line":950},18,[283,952,953],{"class":571},"                    \u003C",[283,955,956],{"class":804},"input\n",[283,958,960,963,965],{"class":285,"line":959},19,[283,961,962],{"class":484},"                        type",[283,964,749],{"class":567},[283,966,967],{"class":478},"\"range\"\n",[283,969,971,974,976,979,982],{"class":285,"line":970},20,[283,972,973],{"class":484},"                        min",[283,975,749],{"class":567},[283,977,978],{"class":571},"{",[283,980,981],{"class":474},"20",[283,983,319],{"class":571},[283,985,987,990,992,994,997],{"class":285,"line":986},21,[283,988,989],{"class":484},"                        max",[283,991,749],{"class":567},[283,993,978],{"class":571},[283,995,996],{"class":474},"2000",[283,998,319],{"class":571},[283,1000,1002,1005,1007,1009,1012],{"class":285,"line":1001},22,[283,1003,1004],{"class":484},"                        step",[283,1006,749],{"class":567},[283,1008,978],{"class":571},[283,1010,1011],{"class":474},"1",[283,1013,319],{"class":571},[283,1015,1017,1020,1022],{"class":285,"line":1016},23,[283,1018,1019],{"class":484},"                        className",[283,1021,749],{"class":567},[283,1023,1024],{"class":478},"\"w-64 accent-blue-600\"\n",[283,1026,1028,1031,1033],{"class":285,"line":1027},24,[283,1029,1030],{"class":484},"                        value",[283,1032,749],{"class":567},[283,1034,1035],{"class":571},"{frequency}\n",[283,1037,1039,1042,1044,1047,1051,1054,1056,1059,1061,1064],{"class":285,"line":1038},25,[283,1040,1041],{"class":484},"                        onChange",[283,1043,749],{"class":567},[283,1045,1046],{"class":571},"{(",[283,1048,1050],{"class":1049},"s4XuR","e",[283,1052,1053],{"class":571},") ",[283,1055,883],{"class":567},[283,1057,1058],{"class":484}," setFrequency",[283,1060,755],{"class":571},[283,1062,1063],{"class":484},"Number",[283,1065,1066],{"class":571},"(e.target.value))}\n",[283,1068,1070],{"class":285,"line":1069},26,[283,1071,1072],{"class":571},"                    />\n",[283,1074,1076,1078,1080,1082,1084,1087,1090,1092],{"class":285,"line":1075},27,[283,1077,953],{"class":571},[283,1079,283],{"class":804},[283,1081,808],{"class":484},[283,1083,749],{"class":567},[283,1085,1086],{"class":478},"\"mt-2 text-lg\"",[283,1088,1089],{"class":571},">{frequency} Hz\u003C/",[283,1091,283],{"class":804},[283,1093,816],{"class":571},[283,1095,1097,1099,1101],{"class":285,"line":1096},28,[283,1098,926],{"class":571},[283,1100,805],{"class":804},[283,1102,816],{"class":571},[283,1104,1106,1109,1111],{"class":285,"line":1105},29,[283,1107,1108],{"class":571},"            \u003C/",[283,1110,805],{"class":804},[283,1112,816],{"class":571},[283,1114,1116,1119,1121],{"class":285,"line":1115},30,[283,1117,1118],{"class":571},"        \u003C/",[283,1120,805],{"class":804},[283,1122,816],{"class":571},[283,1124,1126],{"class":285,"line":1125},31,[283,1127,1128],{"class":571},"    )\n",[283,1130,1132],{"class":285,"line":1131},32,[283,1133,319],{"class":571},[459,1135,1137],{"id":1136},"_3-audioworklet-worker-セットアップ概要","3. AudioWorklet & Worker セットアップ（概要）",[168,1139,1142],{"className":1140,"code":1141,"language":173,"meta":174},[171],"UI クリックで setupAudio()\n → AudioContext 作成\n → SharedArrayBuffer 準備\n → Worklet へ sab 渡す\n → Worker 起動 / sab & sampleRate 渡す\n",[176,1143,1141],{"__ignoreMap":174},[459,1145,1147],{"id":1146},"_4-共有状態に-shareablemap-を使う","4. 共有状態に ShareableMap を使う",[168,1149,1151],{"className":553,"code":1150,"language":555,"meta":174,"style":174},"import { ShareableMap } from 'shared-memory-datastructures'\n\nconst shared = new ShareableMap\u003Cstring, number>()\nshared.set('frequency', 440)\nshared.set('isPlaying', 0)\n// worker.postMessage({ sharedMemory: shared.toTransferableState() });\n",[176,1152,1153,1165,1169,1200,1219,1237],{"__ignoreMap":174},[283,1154,1155,1157,1160,1162],{"class":285,"line":286},[283,1156,568],{"class":567},[283,1158,1159],{"class":571}," { ShareableMap } ",[283,1161,575],{"class":567},[283,1163,1164],{"class":478}," 'shared-memory-datastructures'\n",[283,1166,1167],{"class":285,"line":292},[283,1168,596],{"emptyLinePlaceholder":595},[283,1170,1171,1174,1177,1180,1183,1186,1189,1192,1194,1197],{"class":285,"line":298},[283,1172,1173],{"class":567},"const",[283,1175,1176],{"class":474}," shared",[283,1178,1179],{"class":567}," =",[283,1181,1182],{"class":567}," new",[283,1184,1185],{"class":484}," ShareableMap",[283,1187,1188],{"class":571},"\u003C",[283,1190,1191],{"class":474},"string",[283,1193,740],{"class":571},[283,1195,1196],{"class":474},"number",[283,1198,1199],{"class":571},">()\n",[283,1201,1202,1205,1208,1210,1213,1215,1217],{"class":285,"line":304},[283,1203,1204],{"class":571},"shared.",[283,1206,1207],{"class":484},"set",[283,1209,755],{"class":571},[283,1211,1212],{"class":478},"'frequency'",[283,1214,740],{"class":571},[283,1216,786],{"class":474},[283,1218,761],{"class":571},[283,1220,1221,1223,1225,1227,1230,1232,1235],{"class":285,"line":310},[283,1222,1204],{"class":571},[283,1224,1207],{"class":484},[283,1226,755],{"class":571},[283,1228,1229],{"class":478},"'isPlaying'",[283,1231,740],{"class":571},[283,1233,1234],{"class":474},"0",[283,1236,761],{"class":571},[283,1238,1239],{"class":285,"line":316},[283,1240,1241],{"class":493},"// worker.postMessage({ sharedMemory: shared.toTransferableState() });\n",[459,1243,1245],{"id":1244},"_5-リングバッファの基本形","5. リングバッファの基本形",[168,1247,1249],{"className":553,"code":1248,"language":555,"meta":174,"style":174},"// pointers: Int32Array [readIndex, writeIndex]\nconst readPointer = Atomics.load(pointers, 0)\nconst writePointer = Atomics.load(pointers, 1)\nconst availableWrite = (readPointer - writePointer - 1 + capacity) % capacity\n",[176,1250,1251,1256,1278,1297],{"__ignoreMap":174},[283,1252,1253],{"class":285,"line":286},[283,1254,1255],{"class":493},"// pointers: Int32Array [readIndex, writeIndex]\n",[283,1257,1258,1260,1263,1265,1268,1271,1274,1276],{"class":285,"line":292},[283,1259,1173],{"class":567},[283,1261,1262],{"class":474}," readPointer",[283,1264,1179],{"class":567},[283,1266,1267],{"class":571}," Atomics.",[283,1269,1270],{"class":484},"load",[283,1272,1273],{"class":571},"(pointers, ",[283,1275,1234],{"class":474},[283,1277,761],{"class":571},[283,1279,1280,1282,1285,1287,1289,1291,1293,1295],{"class":285,"line":298},[283,1281,1173],{"class":567},[283,1283,1284],{"class":474}," writePointer",[283,1286,1179],{"class":567},[283,1288,1267],{"class":571},[283,1290,1270],{"class":484},[283,1292,1273],{"class":571},[283,1294,1011],{"class":474},[283,1296,761],{"class":571},[283,1298,1299,1301,1304,1306,1309,1312,1315,1317,1320,1323,1326,1329],{"class":285,"line":304},[283,1300,1173],{"class":567},[283,1302,1303],{"class":474}," availableWrite",[283,1305,1179],{"class":567},[283,1307,1308],{"class":571}," (readPointer ",[283,1310,1311],{"class":567},"-",[283,1313,1314],{"class":571}," writePointer ",[283,1316,1311],{"class":567},[283,1318,1319],{"class":474}," 1",[283,1321,1322],{"class":567}," +",[283,1324,1325],{"class":571}," capacity) ",[283,1327,1328],{"class":567},"%",[283,1330,1331],{"class":571}," capacity\n",[18,1333,1334],{},"XRUN（underrun / overrun）を避けるため、読み書き距離を監視し必要なら無音埋め / 生成抑制。",[459,1336,1338],{"id":1337},"_6-rust-への移行最小","6. Rust への移行（最小）",[168,1340,1342],{"className":465,"code":1341,"language":467,"meta":174,"style":174},"cargo new wasm-lib --lib\n",[176,1343,1344],{"__ignoreMap":174},[283,1345,1346,1349,1351,1354],{"class":285,"line":286},[283,1347,1348],{"class":484},"cargo",[283,1350,1182],{"class":478},[283,1352,1353],{"class":478}," wasm-lib",[283,1355,1356],{"class":474}," --lib\n",[18,1358,1359,1362],{},[176,1360,1361],{},"Cargo.toml",":",[168,1364,1368],{"className":1365,"code":1366,"language":1367,"meta":174,"style":174},"language-toml shiki shiki-themes github-light github-dark","[package]\nname = \"wasm-lib\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nwasm-bindgen = \"0.2\"\n","toml",[176,1369,1370,1375,1380,1385,1390,1394,1399,1404,1408,1413],{"__ignoreMap":174},[283,1371,1372],{"class":285,"line":286},[283,1373,1374],{},"[package]\n",[283,1376,1377],{"class":285,"line":292},[283,1378,1379],{},"name = \"wasm-lib\"\n",[283,1381,1382],{"class":285,"line":298},[283,1383,1384],{},"version = \"0.1.0\"\n",[283,1386,1387],{"class":285,"line":304},[283,1388,1389],{},"edition = \"2021\"\n",[283,1391,1392],{"class":285,"line":310},[283,1393,596],{"emptyLinePlaceholder":595},[283,1395,1396],{"class":285,"line":316},[283,1397,1398],{},"[lib]\n",[283,1400,1401],{"class":285,"line":624},[283,1402,1403],{},"crate-type = [\"cdylib\"]\n",[283,1405,1406],{"class":285,"line":630},[283,1407,596],{"emptyLinePlaceholder":595},[283,1409,1410],{"class":285,"line":636},[283,1411,1412],{},"[dependencies]\n",[283,1414,1415],{"class":285,"line":651},[283,1416,1417],{},"wasm-bindgen = \"0.2\"\n",[18,1419,1420,1362],{},[176,1421,1422],{},"src/lib.rs",[168,1424,1426],{"className":277,"code":1425,"language":279,"meta":174,"style":174},"use wasm_bindgen::prelude::*;\nuse std::f32::consts::PI;\n\n#[wasm_bindgen]\npub struct SineOscillator {\n    phase: f32,\n    sample_rate: f32,\n}\n\n#[wasm_bindgen]\nimpl SineOscillator {\n    #[wasm_bindgen(constructor)]\n    pub fn new(sample_rate: f32) -> SineOscillator {\n        SineOscillator { phase: 0.0, sample_rate }\n    }\n\n    pub fn process(&mut self, length: usize, frequency: f32, amplitude: f32) -> Vec\u003Cf32> {\n        let mut buffer = vec![0.0; length];\n        let phase_increment = frequency / self.sample_rate;\n        for i in 0..length {\n            let sample = (self.phase * 2.0 * PI).sin();\n            buffer[i] = sample * amplitude;\n            self.phase += phase_increment;\n            if self.phase >= 1.0 { self.phase -= 1.0; }\n        }\n        buffer\n    }\n}\n",[176,1427,1428,1433,1438,1442,1446,1451,1456,1461,1465,1469,1473,1477,1482,1487,1492,1496,1500,1505,1510,1515,1520,1525,1530,1535,1540,1545,1550,1554],{"__ignoreMap":174},[283,1429,1430],{"class":285,"line":286},[283,1431,1432],{},"use wasm_bindgen::prelude::*;\n",[283,1434,1435],{"class":285,"line":292},[283,1436,1437],{},"use std::f32::consts::PI;\n",[283,1439,1440],{"class":285,"line":298},[283,1441,596],{"emptyLinePlaceholder":595},[283,1443,1444],{"class":285,"line":304},[283,1445,289],{},[283,1447,1448],{"class":285,"line":310},[283,1449,1450],{},"pub struct SineOscillator {\n",[283,1452,1453],{"class":285,"line":316},[283,1454,1455],{},"    phase: f32,\n",[283,1457,1458],{"class":285,"line":624},[283,1459,1460],{},"    sample_rate: f32,\n",[283,1462,1463],{"class":285,"line":630},[283,1464,319],{},[283,1466,1467],{"class":285,"line":636},[283,1468,596],{"emptyLinePlaceholder":595},[283,1470,1471],{"class":285,"line":651},[283,1472,289],{},[283,1474,1475],{"class":285,"line":664},[283,1476,295],{},[283,1478,1479],{"class":285,"line":670},[283,1480,1481],{},"    #[wasm_bindgen(constructor)]\n",[283,1483,1484],{"class":285,"line":676},[283,1485,1486],{},"    pub fn new(sample_rate: f32) -> SineOscillator {\n",[283,1488,1489],{"class":285,"line":897},[283,1490,1491],{},"        SineOscillator { phase: 0.0, sample_rate }\n",[283,1493,1494],{"class":285,"line":903},[283,1495,313],{},[283,1497,1498],{"class":285,"line":923},[283,1499,596],{"emptyLinePlaceholder":595},[283,1501,1502],{"class":285,"line":934},[283,1503,1504],{},"    pub fn process(&mut self, length: usize, frequency: f32, amplitude: f32) -> Vec\u003Cf32> {\n",[283,1506,1507],{"class":285,"line":950},[283,1508,1509],{},"        let mut buffer = vec![0.0; length];\n",[283,1511,1512],{"class":285,"line":959},[283,1513,1514],{},"        let phase_increment = frequency / self.sample_rate;\n",[283,1516,1517],{"class":285,"line":970},[283,1518,1519],{},"        for i in 0..length {\n",[283,1521,1522],{"class":285,"line":986},[283,1523,1524],{},"            let sample = (self.phase * 2.0 * PI).sin();\n",[283,1526,1527],{"class":285,"line":1001},[283,1528,1529],{},"            buffer[i] = sample * amplitude;\n",[283,1531,1532],{"class":285,"line":1016},[283,1533,1534],{},"            self.phase += phase_increment;\n",[283,1536,1537],{"class":285,"line":1027},[283,1538,1539],{},"            if self.phase >= 1.0 { self.phase -= 1.0; }\n",[283,1541,1542],{"class":285,"line":1038},[283,1543,1544],{},"        }\n",[283,1546,1547],{"class":285,"line":1069},[283,1548,1549],{},"        buffer\n",[283,1551,1552],{"class":285,"line":1075},[283,1553,313],{},[283,1555,1556],{"class":285,"line":1096},[283,1557,319],{},[18,1559,1560],{},"ビルド:",[168,1562,1564],{"className":465,"code":1563,"language":467,"meta":174,"style":174},"cd wasm-lib\nwasm-pack build --target web\nnpm install ../wasm-lib/pkg\n",[176,1565,1566,1573,1586],{"__ignoreMap":174},[283,1567,1568,1570],{"class":285,"line":286},[283,1569,475],{"class":474},[283,1571,1572],{"class":478}," wasm-lib\n",[283,1574,1575,1577,1580,1583],{"class":285,"line":292},[283,1576,265],{"class":484},[283,1578,1579],{"class":478}," build",[283,1581,1582],{"class":474}," --target",[283,1584,1585],{"class":478}," web\n",[283,1587,1588,1590,1592],{"class":285,"line":298},[283,1589,485],{"class":484},[283,1591,511],{"class":478},[283,1593,1594],{"class":478}," ../wasm-lib/pkg\n",[18,1596,1597],{},"Vite 設定追加:",[168,1599,1601],{"className":465,"code":1600,"language":467,"meta":174,"style":174},"npm i -D vite-plugin-wasm vite-plugin-top-level-await\n",[176,1602,1603],{"__ignoreMap":174},[283,1604,1605,1607,1610,1612,1615],{"class":285,"line":286},[283,1606,485],{"class":484},[283,1608,1609],{"class":478}," i",[283,1611,514],{"class":474},[283,1613,1614],{"class":478}," vite-plugin-wasm",[283,1616,1617],{"class":478}," vite-plugin-top-level-await\n",[168,1619,1621],{"className":553,"code":1620,"language":555,"meta":174,"style":174},"// vite.config.ts (抜粋)\nimport wasm from 'vite-plugin-wasm'\nimport topLevelAwait from 'vite-plugin-top-level-await'\nexport default defineConfig({ plugins: [react(), wasm(), topLevelAwait()] })\n",[176,1622,1623,1628,1640,1652],{"__ignoreMap":174},[283,1624,1625],{"class":285,"line":286},[283,1626,1627],{"class":493},"// vite.config.ts (抜粋)\n",[283,1629,1630,1632,1635,1637],{"class":285,"line":292},[283,1631,568],{"class":567},[283,1633,1634],{"class":571}," wasm ",[283,1636,575],{"class":567},[283,1638,1639],{"class":478}," 'vite-plugin-wasm'\n",[283,1641,1642,1644,1647,1649],{"class":285,"line":298},[283,1643,568],{"class":567},[283,1645,1646],{"class":571}," topLevelAwait ",[283,1648,575],{"class":567},[283,1650,1651],{"class":478}," 'vite-plugin-top-level-await'\n",[283,1653,1654,1656,1658,1660,1663,1665,1668,1671,1673,1676],{"class":285,"line":304},[283,1655,601],{"class":567},[283,1657,604],{"class":567},[283,1659,607],{"class":484},[283,1661,1662],{"class":571},"({ plugins: [",[283,1664,618],{"class":484},[283,1666,1667],{"class":571},"(), ",[283,1669,1670],{"class":484},"wasm",[283,1672,1667],{"class":571},[283,1674,1675],{"class":484},"topLevelAwait",[283,1677,1678],{"class":571},"()] })\n",[459,1680,1682],{"id":1681},"_7-worker-から-rust-呼び出し","7. Worker から Rust 呼び出し",[168,1684,1686],{"className":553,"code":1685,"language":555,"meta":174,"style":174},"import init, { SineOscillator } from 'wasm-lib'\n\nself.onmessage = async (e) => {\n    const { sab, sampleRate, sharedMemory, pointersSAB } = e.data\n    await init()\n    const osc = new SineOscillator(sampleRate)\n    // 生成 → SAB 書き込みループへ\n}\n",[176,1687,1688,1700,1704,1729,1762,1772,1789,1794],{"__ignoreMap":174},[283,1689,1690,1692,1695,1697],{"class":285,"line":286},[283,1691,568],{"class":567},[283,1693,1694],{"class":571}," init, { SineOscillator } ",[283,1696,575],{"class":567},[283,1698,1699],{"class":478}," 'wasm-lib'\n",[283,1701,1702],{"class":285,"line":292},[283,1703,596],{"emptyLinePlaceholder":595},[283,1705,1706,1709,1712,1714,1717,1720,1722,1724,1726],{"class":285,"line":298},[283,1707,1708],{"class":571},"self.",[283,1710,1711],{"class":484},"onmessage",[283,1713,1179],{"class":567},[283,1715,1716],{"class":567}," async",[283,1718,1719],{"class":571}," (",[283,1721,1050],{"class":1049},[283,1723,1053],{"class":571},[283,1725,883],{"class":567},[283,1727,1728],{"class":571}," {\n",[283,1730,1731,1733,1736,1739,1741,1744,1746,1749,1751,1754,1757,1759],{"class":285,"line":304},[283,1732,731],{"class":567},[283,1734,1735],{"class":571}," { ",[283,1737,1738],{"class":474},"sab",[283,1740,740],{"class":571},[283,1742,1743],{"class":474},"sampleRate",[283,1745,740],{"class":571},[283,1747,1748],{"class":474},"sharedMemory",[283,1750,740],{"class":571},[283,1752,1753],{"class":474},"pointersSAB",[283,1755,1756],{"class":571}," } ",[283,1758,749],{"class":567},[283,1760,1761],{"class":571}," e.data\n",[283,1763,1764,1767,1769],{"class":285,"line":310},[283,1765,1766],{"class":567},"    await",[283,1768,533],{"class":484},[283,1770,1771],{"class":571},"()\n",[283,1773,1774,1776,1779,1781,1783,1786],{"class":285,"line":316},[283,1775,731],{"class":567},[283,1777,1778],{"class":474}," osc",[283,1780,1179],{"class":567},[283,1782,1182],{"class":567},[283,1784,1785],{"class":484}," SineOscillator",[283,1787,1788],{"class":571},"(sampleRate)\n",[283,1790,1791],{"class":285,"line":624},[283,1792,1793],{"class":493},"    // 生成 → SAB 書き込みループへ\n",[283,1795,1796],{"class":285,"line":630},[283,1797,319],{"class":571},[54,1799],{},[33,1801,1802],{"id":1802},"今後の小さな改善アイデア",[38,1804,1805,1808,1811,1814],{},[41,1806,1807],{},"再生/停止時に 2–5 ms フェードを入れてポップ除去",[41,1809,1810],{},"動的バッファチューニング（負荷に応じてターゲットフィルレベル変更）",[41,1812,1813],{},"Parameter smoothing (exponential ramp) でスライダー急変のノイズ低減",[41,1815,1816],{},"SIMD / multiple oscillators 合成（Rust 側）",[54,1818],{},[18,1820,1821],{},"お疲れさまでした！付録を含め最後まで読んでくださり感謝です 🙏",[1823,1824,1825],"style",{},"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sj4cs, html code.shiki .sj4cs{--shiki-default:#005CC5;--shiki-dark:#79B8FF}html pre.shiki code .sZZnC, html code.shiki .sZZnC{--shiki-default:#032F62;--shiki-dark:#9ECBFF}html pre.shiki code .sScJk, html code.shiki .sScJk{--shiki-default:#6F42C1;--shiki-dark:#B392F0}html pre.shiki code .sJ8bj, html code.shiki .sJ8bj{--shiki-default:#6A737D;--shiki-dark:#6A737D}html pre.shiki code .szBVR, html code.shiki .szBVR{--shiki-default:#D73A49;--shiki-dark:#F97583}html pre.shiki code .sVt8B, html code.shiki .sVt8B{--shiki-default:#24292E;--shiki-dark:#E1E4E8}html pre.shiki code .s9eBZ, html code.shiki .s9eBZ{--shiki-default:#22863A;--shiki-dark:#85E89D}html pre.shiki code .s4XuR, html code.shiki .s4XuR{--shiki-default:#E36209;--shiki-dark:#FFAB70}",{"title":174,"searchDepth":292,"depth":292,"links":1827},[1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1847],{"id":35,"depth":292,"text":36},{"id":58,"depth":292,"text":59},{"id":126,"depth":292,"text":127},{"id":155,"depth":292,"text":156},{"id":162,"depth":292,"text":163},{"id":187,"depth":292,"text":188},{"id":218,"depth":292,"text":219},{"id":254,"depth":292,"text":255},{"id":327,"depth":292,"text":327},{"id":402,"depth":292,"text":402},{"id":453,"depth":292,"text":454,"children":1839},[1840,1841,1842,1843,1844,1845,1846],{"id":461,"depth":298,"text":462},{"id":682,"depth":298,"text":683},{"id":1136,"depth":298,"text":1137},{"id":1146,"depth":298,"text":1147},{"id":1244,"depth":298,"text":1245},{"id":1337,"depth":298,"text":1338},{"id":1681,"depth":298,"text":1682},{"id":1802,"depth":292,"text":1802},"/tidaw/cover.jpg","2025-09-18","React + Rust (WASM) を組み合わせてブラウザ上でリアルタイムオーディオ処理に挑む長編アーキテクチャ＆実装記。","md",{},"/tidaw",{"title":5,"description":1850},"tidaw",[1857,1858,1859,1860,1861],"WebAudio","Rust","WASM","React","Architecture","a5uRCfAy35ErKnnfFV5051cB3PxPSG5DKDbOldGXCws",1758192149053]